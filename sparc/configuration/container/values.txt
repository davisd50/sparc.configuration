============================================
Sparc Container Configuration Value Accessor
============================================
In some situations, it is not possible for a Sparc component to know the
container data type (dict, list, set, tuple) it is dealing with.  The
ISparcPyContainerValueIterator interface is intended to ease the pain
of accessing the value of a given configuration key.

The easiest case of value access is a dict, as the value can be directly
referenced based on key name and there will not be duplicate keys.  The other 
container types are a touch more complicated as they are either sequenced
(list, tuple) or a simple container (set).  In these cases, key/value pairs
are usually one level deep.

Start with a simple dict config
>>> from zope import component
>>> from sparc.configuration import container
>>> config1 = {'1':'a','2':'b'}
>>> list(component.getUtility(container.ISparcPyDictValueIterator).values(config1,'1'))
['a']

Now, lets bury that config into another list-based config.  Notice how we
can still access the value the same as above
>>> config2 = [config1]
>>> list(component.getUtility(container.ISparcPyDictValueIterator).values(config2,'1'))
['a']

One difference, though is lists might have the same key twice.
>>> config3 = [config1, config1]
>>> list(component.getUtility(container.ISparcPyDictValueIterator).values(config3,'1'))
['a', 'a']

If key is buried too deep, then our iterator won't work (you have to access this
in stand python ways)
>>> config4 = [[config1]]
>>> list(component.getUtility(container.ISparcPyDictValueIterator).values(config4,'1'))
[]

Getting values in this way is a little too verbose and cumbersome for most
use cases.  Because of this, the convenience IPyContainerConfigValue interface
is available along with an adapter for objects providing 
ISparcAppPyContainerConfiguration.

Create container providing ISparcAppPyContainerConfiguration and adapt it into
a IPyContainerConfigValue provider
>>> from sparc.configuration.container import IPyContainerConfigValue
>>> config = component.createObject(u'sparc.configuration.container', 
...     [{},{'key1':{'key2':'value1'}}])
>>> v_getter = IPyContainerConfigValue(config)

We can now start referencing values from the config easily
>>> v_getter.get('key1')
{'key2': 'value1'}
>>> v_getter.get('key1','key2')
'value1'

Illegal keys raise exceptions (if no default is provided)
>>> v_getter.get('illegal_key')
Traceback (most recent call last):
...
KeyError: 'key: illegal_key not available in configuration.'

You can provide a default to protect against exceptions
>>> v_getter.get('key1','key2','illegal_key', default='test')
'test'

If the config contains competing entries, only the first will be returned
>>> config = component.createObject(u'sparc.configuration.container', 
...     [{'key1':{'key2':'valueA'}}, {'key1':{'key2':'valueB'}}])
>>> v_getter = IPyContainerConfigValue(config)
>>> v_getter.get('key1','key2')
'valueA'